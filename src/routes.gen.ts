/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TrendingImport } from './routes/trending'
import { Route as TopicImport } from './routes/topic'
import { Route as StoreImport } from './routes/store'
import { Route as SettingsImport } from './routes/settings'
import { Route as SearchImport } from './routes/search'
import { Route as OnboardingImport } from './routes/onboarding'
import { Route as NewsfeedImport } from './routes/newsfeed'
import { Route as GroupImport } from './routes/group'
import { Route as GlobalImport } from './routes/global'
import { Route as CreateTopicImport } from './routes/create-topic'
import { Route as CreateNewsfeedImport } from './routes/create-newsfeed'
import { Route as CreateGroupImport } from './routes/create-group'
import { Route as BootstrapRelaysImport } from './routes/bootstrap-relays'
import { Route as IndexImport } from './routes/index'
import { Route as EditorIndexImport } from './routes/editor/index'
import { Route as AccountIndexImport } from './routes/$account/index'
import { Route as ZapIdImport } from './routes/zap.$id'
import { Route as UsersPubkeyImport } from './routes/users/$pubkey'
import { Route as TrendingUsersImport } from './routes/trending.users'
import { Route as TrendingNotesImport } from './routes/trending.notes'
import { Route as SettingsWalletImport } from './routes/settings/wallet'
import { Route as SettingsUserImport } from './routes/settings/user'
import { Route as SettingsRelayImport } from './routes/settings/relay'
import { Route as SettingsGeneralImport } from './routes/settings/general'
import { Route as SettingsBitcoinConnectImport } from './routes/settings/bitcoin-connect'
import { Route as SettingsBackupImport } from './routes/settings/backup'
import { Route as SearchUsersImport } from './routes/search.users'
import { Route as SearchNotesImport } from './routes/search.notes'
import { Route as EventsIdImport } from './routes/events/$id'
import { Route as CreateNewsfeedUsersImport } from './routes/create-newsfeed.users'
import { Route as CreateNewsfeedF2fImport } from './routes/create-newsfeed.f2f'
import { Route as AuthCreateProfileImport } from './routes/auth/create-profile'
import { Route as AccountPanelImport } from './routes/$account/panel'
import { Route as AccountHomeImport } from './routes/$account/home'
import { Route as AuthAccountBackupImport } from './routes/auth/$account.backup'

// Create Virtual Routes

const LandingLazyImport = createFileRoute('/landing')()
const AuthLazyImport = createFileRoute('/auth')()
const AuthRemoteLazyImport = createFileRoute('/auth/remote')()
const AuthImportLazyImport = createFileRoute('/auth/import')()

// Create/Update Routes

const LandingLazyRoute = LandingLazyImport.update({
  path: '/landing',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/landing.lazy').then((d) => d.Route))

const AuthLazyRoute = AuthLazyImport.update({
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth.lazy').then((d) => d.Route))

const TrendingRoute = TrendingImport.update({
  path: '/trending',
  getParentRoute: () => rootRoute,
} as any)

const TopicRoute = TopicImport.update({
  path: '/topic',
  getParentRoute: () => rootRoute,
} as any)

const StoreRoute = StoreImport.update({
  path: '/store',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const SearchRoute = SearchImport.update({
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const OnboardingRoute = OnboardingImport.update({
  path: '/onboarding',
  getParentRoute: () => rootRoute,
} as any)

const NewsfeedRoute = NewsfeedImport.update({
  path: '/newsfeed',
  getParentRoute: () => rootRoute,
} as any)

const GroupRoute = GroupImport.update({
  path: '/group',
  getParentRoute: () => rootRoute,
} as any)

const GlobalRoute = GlobalImport.update({
  path: '/global',
  getParentRoute: () => rootRoute,
} as any)

const CreateTopicRoute = CreateTopicImport.update({
  path: '/create-topic',
  getParentRoute: () => rootRoute,
} as any)

const CreateNewsfeedRoute = CreateNewsfeedImport.update({
  path: '/create-newsfeed',
  getParentRoute: () => rootRoute,
} as any)

const CreateGroupRoute = CreateGroupImport.update({
  path: '/create-group',
  getParentRoute: () => rootRoute,
} as any)

const BootstrapRelaysRoute = BootstrapRelaysImport.update({
  path: '/bootstrap-relays',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EditorIndexRoute = EditorIndexImport.update({
  path: '/editor/',
  getParentRoute: () => rootRoute,
} as any)

const AccountIndexRoute = AccountIndexImport.update({
  path: '/$account/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/$account/index.lazy').then((d) => d.Route),
)

const AuthRemoteLazyRoute = AuthRemoteLazyImport.update({
  path: '/remote',
  getParentRoute: () => AuthLazyRoute,
} as any).lazy(() => import('./routes/auth/remote.lazy').then((d) => d.Route))

const AuthImportLazyRoute = AuthImportLazyImport.update({
  path: '/import',
  getParentRoute: () => AuthLazyRoute,
} as any).lazy(() => import('./routes/auth/import.lazy').then((d) => d.Route))

const ZapIdRoute = ZapIdImport.update({
  path: '/zap/$id',
  getParentRoute: () => rootRoute,
} as any)

const UsersPubkeyRoute = UsersPubkeyImport.update({
  path: '/users/$pubkey',
  getParentRoute: () => rootRoute,
} as any)

const TrendingUsersRoute = TrendingUsersImport.update({
  path: '/users',
  getParentRoute: () => TrendingRoute,
} as any)

const TrendingNotesRoute = TrendingNotesImport.update({
  path: '/notes',
  getParentRoute: () => TrendingRoute,
} as any)

const SettingsWalletRoute = SettingsWalletImport.update({
  path: '/wallet',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsUserRoute = SettingsUserImport.update({
  path: '/user',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsRelayRoute = SettingsRelayImport.update({
  path: '/relay',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsGeneralRoute = SettingsGeneralImport.update({
  path: '/general',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsBitcoinConnectRoute = SettingsBitcoinConnectImport.update({
  path: '/bitcoin-connect',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsBackupRoute = SettingsBackupImport.update({
  path: '/backup',
  getParentRoute: () => SettingsRoute,
} as any)

const SearchUsersRoute = SearchUsersImport.update({
  path: '/users',
  getParentRoute: () => SearchRoute,
} as any)

const SearchNotesRoute = SearchNotesImport.update({
  path: '/notes',
  getParentRoute: () => SearchRoute,
} as any)

const EventsIdRoute = EventsIdImport.update({
  path: '/events/$id',
  getParentRoute: () => rootRoute,
} as any)

const CreateNewsfeedUsersRoute = CreateNewsfeedUsersImport.update({
  path: '/users',
  getParentRoute: () => CreateNewsfeedRoute,
} as any)

const CreateNewsfeedF2fRoute = CreateNewsfeedF2fImport.update({
  path: '/f2f',
  getParentRoute: () => CreateNewsfeedRoute,
} as any)

const AuthCreateProfileRoute = AuthCreateProfileImport.update({
  path: '/create-profile',
  getParentRoute: () => AuthLazyRoute,
} as any)

const AccountPanelRoute = AccountPanelImport.update({
  path: '/$account/panel',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/$account/panel.lazy').then((d) => d.Route),
)

const AccountHomeRoute = AccountHomeImport.update({
  path: '/$account/home',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/$account/home.lazy').then((d) => d.Route))

const AuthAccountBackupRoute = AuthAccountBackupImport.update({
  path: '/$account/backup',
  getParentRoute: () => AuthLazyRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/bootstrap-relays': {
      id: '/bootstrap-relays'
      path: '/bootstrap-relays'
      fullPath: '/bootstrap-relays'
      preLoaderRoute: typeof BootstrapRelaysImport
      parentRoute: typeof rootRoute
    }
    '/create-group': {
      id: '/create-group'
      path: '/create-group'
      fullPath: '/create-group'
      preLoaderRoute: typeof CreateGroupImport
      parentRoute: typeof rootRoute
    }
    '/create-newsfeed': {
      id: '/create-newsfeed'
      path: '/create-newsfeed'
      fullPath: '/create-newsfeed'
      preLoaderRoute: typeof CreateNewsfeedImport
      parentRoute: typeof rootRoute
    }
    '/create-topic': {
      id: '/create-topic'
      path: '/create-topic'
      fullPath: '/create-topic'
      preLoaderRoute: typeof CreateTopicImport
      parentRoute: typeof rootRoute
    }
    '/global': {
      id: '/global'
      path: '/global'
      fullPath: '/global'
      preLoaderRoute: typeof GlobalImport
      parentRoute: typeof rootRoute
    }
    '/group': {
      id: '/group'
      path: '/group'
      fullPath: '/group'
      preLoaderRoute: typeof GroupImport
      parentRoute: typeof rootRoute
    }
    '/newsfeed': {
      id: '/newsfeed'
      path: '/newsfeed'
      fullPath: '/newsfeed'
      preLoaderRoute: typeof NewsfeedImport
      parentRoute: typeof rootRoute
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/store': {
      id: '/store'
      path: '/store'
      fullPath: '/store'
      preLoaderRoute: typeof StoreImport
      parentRoute: typeof rootRoute
    }
    '/topic': {
      id: '/topic'
      path: '/topic'
      fullPath: '/topic'
      preLoaderRoute: typeof TopicImport
      parentRoute: typeof rootRoute
    }
    '/trending': {
      id: '/trending'
      path: '/trending'
      fullPath: '/trending'
      preLoaderRoute: typeof TrendingImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLazyImport
      parentRoute: typeof rootRoute
    }
    '/landing': {
      id: '/landing'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingLazyImport
      parentRoute: typeof rootRoute
    }
    '/$account/home': {
      id: '/$account/home'
      path: '/$account/home'
      fullPath: '/$account/home'
      preLoaderRoute: typeof AccountHomeImport
      parentRoute: typeof rootRoute
    }
    '/$account/panel': {
      id: '/$account/panel'
      path: '/$account/panel'
      fullPath: '/$account/panel'
      preLoaderRoute: typeof AccountPanelImport
      parentRoute: typeof rootRoute
    }
    '/auth/create-profile': {
      id: '/auth/create-profile'
      path: '/create-profile'
      fullPath: '/auth/create-profile'
      preLoaderRoute: typeof AuthCreateProfileImport
      parentRoute: typeof AuthLazyImport
    }
    '/create-newsfeed/f2f': {
      id: '/create-newsfeed/f2f'
      path: '/f2f'
      fullPath: '/create-newsfeed/f2f'
      preLoaderRoute: typeof CreateNewsfeedF2fImport
      parentRoute: typeof CreateNewsfeedImport
    }
    '/create-newsfeed/users': {
      id: '/create-newsfeed/users'
      path: '/users'
      fullPath: '/create-newsfeed/users'
      preLoaderRoute: typeof CreateNewsfeedUsersImport
      parentRoute: typeof CreateNewsfeedImport
    }
    '/events/$id': {
      id: '/events/$id'
      path: '/events/$id'
      fullPath: '/events/$id'
      preLoaderRoute: typeof EventsIdImport
      parentRoute: typeof rootRoute
    }
    '/search/notes': {
      id: '/search/notes'
      path: '/notes'
      fullPath: '/search/notes'
      preLoaderRoute: typeof SearchNotesImport
      parentRoute: typeof SearchImport
    }
    '/search/users': {
      id: '/search/users'
      path: '/users'
      fullPath: '/search/users'
      preLoaderRoute: typeof SearchUsersImport
      parentRoute: typeof SearchImport
    }
    '/settings/backup': {
      id: '/settings/backup'
      path: '/backup'
      fullPath: '/settings/backup'
      preLoaderRoute: typeof SettingsBackupImport
      parentRoute: typeof SettingsImport
    }
    '/settings/bitcoin-connect': {
      id: '/settings/bitcoin-connect'
      path: '/bitcoin-connect'
      fullPath: '/settings/bitcoin-connect'
      preLoaderRoute: typeof SettingsBitcoinConnectImport
      parentRoute: typeof SettingsImport
    }
    '/settings/general': {
      id: '/settings/general'
      path: '/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof SettingsGeneralImport
      parentRoute: typeof SettingsImport
    }
    '/settings/relay': {
      id: '/settings/relay'
      path: '/relay'
      fullPath: '/settings/relay'
      preLoaderRoute: typeof SettingsRelayImport
      parentRoute: typeof SettingsImport
    }
    '/settings/user': {
      id: '/settings/user'
      path: '/user'
      fullPath: '/settings/user'
      preLoaderRoute: typeof SettingsUserImport
      parentRoute: typeof SettingsImport
    }
    '/settings/wallet': {
      id: '/settings/wallet'
      path: '/wallet'
      fullPath: '/settings/wallet'
      preLoaderRoute: typeof SettingsWalletImport
      parentRoute: typeof SettingsImport
    }
    '/trending/notes': {
      id: '/trending/notes'
      path: '/notes'
      fullPath: '/trending/notes'
      preLoaderRoute: typeof TrendingNotesImport
      parentRoute: typeof TrendingImport
    }
    '/trending/users': {
      id: '/trending/users'
      path: '/users'
      fullPath: '/trending/users'
      preLoaderRoute: typeof TrendingUsersImport
      parentRoute: typeof TrendingImport
    }
    '/users/$pubkey': {
      id: '/users/$pubkey'
      path: '/users/$pubkey'
      fullPath: '/users/$pubkey'
      preLoaderRoute: typeof UsersPubkeyImport
      parentRoute: typeof rootRoute
    }
    '/zap/$id': {
      id: '/zap/$id'
      path: '/zap/$id'
      fullPath: '/zap/$id'
      preLoaderRoute: typeof ZapIdImport
      parentRoute: typeof rootRoute
    }
    '/auth/import': {
      id: '/auth/import'
      path: '/import'
      fullPath: '/auth/import'
      preLoaderRoute: typeof AuthImportLazyImport
      parentRoute: typeof AuthLazyImport
    }
    '/auth/remote': {
      id: '/auth/remote'
      path: '/remote'
      fullPath: '/auth/remote'
      preLoaderRoute: typeof AuthRemoteLazyImport
      parentRoute: typeof AuthLazyImport
    }
    '/$account/': {
      id: '/$account/'
      path: '/$account'
      fullPath: '/$account'
      preLoaderRoute: typeof AccountIndexImport
      parentRoute: typeof rootRoute
    }
    '/editor/': {
      id: '/editor/'
      path: '/editor'
      fullPath: '/editor'
      preLoaderRoute: typeof EditorIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/$account/backup': {
      id: '/auth/$account/backup'
      path: '/$account/backup'
      fullPath: '/auth/$account/backup'
      preLoaderRoute: typeof AuthAccountBackupImport
      parentRoute: typeof AuthLazyImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  BootstrapRelaysRoute,
  CreateGroupRoute,
  CreateNewsfeedRoute: CreateNewsfeedRoute.addChildren({
    CreateNewsfeedF2fRoute,
    CreateNewsfeedUsersRoute,
  }),
  CreateTopicRoute,
  GlobalRoute,
  GroupRoute,
  NewsfeedRoute,
  OnboardingRoute,
  SearchRoute: SearchRoute.addChildren({ SearchNotesRoute, SearchUsersRoute }),
  SettingsRoute: SettingsRoute.addChildren({
    SettingsBackupRoute,
    SettingsBitcoinConnectRoute,
    SettingsGeneralRoute,
    SettingsRelayRoute,
    SettingsUserRoute,
    SettingsWalletRoute,
  }),
  StoreRoute,
  TopicRoute,
  TrendingRoute: TrendingRoute.addChildren({
    TrendingNotesRoute,
    TrendingUsersRoute,
  }),
  AuthLazyRoute: AuthLazyRoute.addChildren({
    AuthCreateProfileRoute,
    AuthImportLazyRoute,
    AuthRemoteLazyRoute,
    AuthAccountBackupRoute,
  }),
  LandingLazyRoute,
  AccountHomeRoute,
  AccountPanelRoute,
  EventsIdRoute,
  UsersPubkeyRoute,
  ZapIdRoute,
  AccountIndexRoute,
  EditorIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/bootstrap-relays",
        "/create-group",
        "/create-newsfeed",
        "/create-topic",
        "/global",
        "/group",
        "/newsfeed",
        "/onboarding",
        "/search",
        "/settings",
        "/store",
        "/topic",
        "/trending",
        "/auth",
        "/landing",
        "/$account/home",
        "/$account/panel",
        "/events/$id",
        "/users/$pubkey",
        "/zap/$id",
        "/$account/",
        "/editor/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/bootstrap-relays": {
      "filePath": "bootstrap-relays.tsx"
    },
    "/create-group": {
      "filePath": "create-group.tsx"
    },
    "/create-newsfeed": {
      "filePath": "create-newsfeed.tsx",
      "children": [
        "/create-newsfeed/f2f",
        "/create-newsfeed/users"
      ]
    },
    "/create-topic": {
      "filePath": "create-topic.tsx"
    },
    "/global": {
      "filePath": "global.tsx"
    },
    "/group": {
      "filePath": "group.tsx"
    },
    "/newsfeed": {
      "filePath": "newsfeed.tsx"
    },
    "/onboarding": {
      "filePath": "onboarding.tsx"
    },
    "/search": {
      "filePath": "search.tsx",
      "children": [
        "/search/notes",
        "/search/users"
      ]
    },
    "/settings": {
      "filePath": "settings.tsx",
      "children": [
        "/settings/backup",
        "/settings/bitcoin-connect",
        "/settings/general",
        "/settings/relay",
        "/settings/user",
        "/settings/wallet"
      ]
    },
    "/store": {
      "filePath": "store.tsx"
    },
    "/topic": {
      "filePath": "topic.tsx"
    },
    "/trending": {
      "filePath": "trending.tsx",
      "children": [
        "/trending/notes",
        "/trending/users"
      ]
    },
    "/auth": {
      "filePath": "auth.lazy.tsx",
      "children": [
        "/auth/create-profile",
        "/auth/import",
        "/auth/remote",
        "/auth/$account/backup"
      ]
    },
    "/landing": {
      "filePath": "landing.lazy.tsx"
    },
    "/$account/home": {
      "filePath": "$account/home.tsx"
    },
    "/$account/panel": {
      "filePath": "$account/panel.tsx"
    },
    "/auth/create-profile": {
      "filePath": "auth/create-profile.tsx",
      "parent": "/auth"
    },
    "/create-newsfeed/f2f": {
      "filePath": "create-newsfeed.f2f.tsx",
      "parent": "/create-newsfeed"
    },
    "/create-newsfeed/users": {
      "filePath": "create-newsfeed.users.tsx",
      "parent": "/create-newsfeed"
    },
    "/events/$id": {
      "filePath": "events/$id.tsx"
    },
    "/search/notes": {
      "filePath": "search.notes.tsx",
      "parent": "/search"
    },
    "/search/users": {
      "filePath": "search.users.tsx",
      "parent": "/search"
    },
    "/settings/backup": {
      "filePath": "settings/backup.tsx",
      "parent": "/settings"
    },
    "/settings/bitcoin-connect": {
      "filePath": "settings/bitcoin-connect.tsx",
      "parent": "/settings"
    },
    "/settings/general": {
      "filePath": "settings/general.tsx",
      "parent": "/settings"
    },
    "/settings/relay": {
      "filePath": "settings/relay.tsx",
      "parent": "/settings"
    },
    "/settings/user": {
      "filePath": "settings/user.tsx",
      "parent": "/settings"
    },
    "/settings/wallet": {
      "filePath": "settings/wallet.tsx",
      "parent": "/settings"
    },
    "/trending/notes": {
      "filePath": "trending.notes.tsx",
      "parent": "/trending"
    },
    "/trending/users": {
      "filePath": "trending.users.tsx",
      "parent": "/trending"
    },
    "/users/$pubkey": {
      "filePath": "users/$pubkey.tsx"
    },
    "/zap/$id": {
      "filePath": "zap.$id.tsx"
    },
    "/auth/import": {
      "filePath": "auth/import.lazy.tsx",
      "parent": "/auth"
    },
    "/auth/remote": {
      "filePath": "auth/remote.lazy.tsx",
      "parent": "/auth"
    },
    "/$account/": {
      "filePath": "$account/index.tsx"
    },
    "/editor/": {
      "filePath": "editor/index.tsx"
    },
    "/auth/$account/backup": {
      "filePath": "auth/$account.backup.tsx",
      "parent": "/auth"
    }
  }
}
ROUTE_MANIFEST_END */
